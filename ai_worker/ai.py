import os
import openai
import subprocess
import time
import threading
from dotenv import load_dotenv

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")

def ask_gpt(prompt: str, model="gpt-4", temperature=0.7) -> str:
    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–µ–Ω–¥–µ—Ä–∞–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": prompt}
            ],
            temperature=temperature
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT: {str(e)}"

def vpn_connect(config_path):
    while True:
        print(f"–ó–∞–ø—É—Å–∫–∞–µ–º VPN —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: {config_path}")
        proc = subprocess.Popen(['openvpn', '--config', config_path])
        time.sleep(10)  # –¥–∞—ë–º VPN –ø–æ–¥–Ω—è—Ç—å—Å—è
        print("[‚úì] –ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ VPN:")
        os.system("curl ifconfig.me")  # –ø–æ–∫–∞–∂–µ—Ç IP –ø—Ä—è–º–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
        proc.wait()
        print("VPN-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
        time.sleep(15)


if __name__ == "__main__":
    vpn_config = os.path.join(os.path.dirname(__file__), "vpn_configs", "vpngate_vpn185479259.opengw.net_udp_1888.ovpn")
    print("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥:", vpn_config)

    vpn_thread = threading.Thread(target=vpn_connect, args=(vpn_config,), daemon=True)
    vpn_thread.start()

    time.sleep(15)  # –î–∞–π VPN –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è

    print("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT...")
    response = ask_gpt("–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?")
    print("üß† –û—Ç–≤–µ—Ç GPT:", response)


