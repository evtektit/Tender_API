from fastapi import FastAPI, Request, Body
from pydantic import BaseModel
from .openai_client import ask_gpt
from common.logger import get_logger
from fastapi.responses import JSONResponse

logger = get_logger(__name__)
logger.info("ai_worker started!")
app = FastAPI()

class GPTRequest(BaseModel):
    text: str

@app.post("/ai/ask")
async def ask_route(request: Request, data: GPTRequest = Body(...)):
    logger.info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ /ai/ask")
    reply = ask_gpt(data.text)
    logger.debug(f"üß† –û—Ç–≤–µ—Ç: {reply}")
    return {"answer": reply}

def get_uptime():
    # –¢—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∞–ø—Ç–∞–π–º–∞
    return "42h 15m"

def database_connected():
    # –ü—Ä–∏–º–µ—Ä: –ø–∏–Ω–≥ –∫ –ë–î –∏–ª–∏ —Ñ–ª–∞–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    return True

@app.get("/health")
async def health():
    if not database_connected():
        return JSONResponse(status_code=503, content={"status": "db down"})

    return JSONResponse(content={
        "status": "ok",
        "uptime": get_uptime(),
        "version": "1.2.3"
    })

if __name__ == "__main__":
    import uvicorn
    logger.info("üöÄ ai_worker: –ó–∞–ø—É—Å–∫ uvicorn")
    uvicorn.run("ai:app", host="0.0.0.0", port=8001)
