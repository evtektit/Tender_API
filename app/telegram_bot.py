from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from app.ai import ask_gpt
import os
from dotenv import load_dotenv
import logging

# üîß –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üü¢ –õ–æ–≥–≥–µ—Ä
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üß† –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä. –ù–∞–ø–∏—à–∏ /ai –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¢–ó —á–µ—Ä–µ–∑ AI.")

# /ai
async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¢–ó –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    user_states[update.effective_user.id] = "waiting_for_tz"

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_ai_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_states.get(user_id) == "waiting_for_tz":
        text = update.message.text
        await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —á–µ—Ä–µ–∑ AI...")
        result = ask_gpt(text)
        await update.message.reply_text(result)
        user_states[user_id] = None

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    logger.info("üöÄ TenderBot AI –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ai", ai_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_text))
    try:
        app.run_polling()
    except KeyboardInterrupt:
        logger.info("üõë TenderBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

if __name__ == "__main__":
    run_bot()
