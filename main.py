import sys
import asyncio

# –í–ê–ñ–ù–û: —Å—Ç–∞–≤–∏–º Proactor –î–û –ª—é–±—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ FastAPI/uvicorn/asyncio-–∑–∞–¥–∞—á
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

from fastapi import FastAPI
from fastapi.responses import JSONResponse

from api.routes import home, ai
from ai_worker.logger import get_logger

app = FastAPI()

@app.get("/health")
async def health_check():
    return JSONResponse(content={"status": "ok"})

logger = get_logger(__name__)   # –ª–æ–≥–≥–µ—Ä —Å app.log –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
logger.info("üöÄ –ó–∞–ø—É—Å–∫ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.include_router(home.router)
app.include_router(ai.router)

if __name__ == "__main__":
    import uvicorn
    # –ù–∞ Windows –æ—Ç–∫–ª—é—á–∞–µ–º reload, –∏–Ω–∞—á–µ uvicorn —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç –ø–æ–ª–∏—Ç–∏–∫—É –Ω–∞ Selector
    uvicorn.run(
        "main:app",
        host="127.0.0.1",
        port=8000,
        reload=False if sys.platform == "win32" else True,
    )
