import os
import asyncio
from pathlib import Path
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from parsers.playwright_parser import parse_tenders

from common.logger import get_logger
from api.routes import home, ai  # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã

logger = get_logger(__name__)
logger.info("api started!")

BASE_DIR = Path(__file__).resolve().parent  # .../api
app = FastAPI(debug=True)

# —Å—Ç–∞—Ç–∏–∫–∞ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏
app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")

# === Telegram polling (–æ—Ç–∫–ª—é—á—ë–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ—Ç ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä) ===
TG_POLLING = os.getenv("TG_POLLING", "0") == "1"
_polling_task: asyncio.Task | None = None

@app.on_event("startup")
async def _startup():
    logger.info("üöÄ FastAPI —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª")

@app.on_event("shutdown")
async def _shutdown():
    logger.info("üõë FastAPI –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# –∑–¥–æ—Ä–æ–≤—å–µ
@app.get("/health")
async def health():
    return JSONResponse(content={"status": "ok"})

# –ø–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞
from fastapi import Query

@app.get("/search")
async def search_tenders_api(q: str = Query(..., description="–°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞")):
    logger.info(f"üì• –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {q}")

    try:
        result = await parse_tenders(q)
        return {"ok": True, "playwright": result, "playwright_count": len(result)}
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        return {"ok": False, "error": str(e)}

# –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –ò–ò)
app.include_router(home.router)
app.include_router(ai.router)
