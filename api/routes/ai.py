import os
from fastapi import APIRouter, Body  # ‚Üê –í–ê–ñ–ù–û: –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å APIRouter!
from openai import OpenAI
from dotenv import load_dotenv
from pydantic import BaseModel
from fastapi.responses import JSONResponse

# üü¢ –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FastAPI
router = APIRouter()

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–∞
load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ü§ñ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT
def ask_gpt(prompt: str, model="gpt-4", temperature=0.7) -> str:
    try:
        chat = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—Ç–∏."},
                {"role": "user", "content": prompt}
            ],
            temperature=temperature
        )
        return chat.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ AI: {str(e)}"

# –ú–æ–¥–µ–ª—å —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
class GPTRequest(BaseModel):
    prompt: str

# POST-—ç–Ω–¥–ø–æ–∏–Ω—Ç
@router.post("/ai/ask")
async def ask_gpt_api(data: GPTRequest):
    answer = ask_gpt(data.prompt)
    return JSONResponse(content={"response": answer})
