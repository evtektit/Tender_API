import os
from dotenv import load_dotenv
import logging
import httpx
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∂–¥—ë—Ç –ª–∏ –±–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?
user_states = {}

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä. –ù–∞–ø–∏—à–∏ /ai –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¢–ó —á–µ—Ä–µ–∑ AI.")

# /ai –∫–æ–º–∞–Ω–¥–∞
async def ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¢–ó –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    user_states[update.effective_user.id] = "waiting_for_tz"

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_ai_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_states.get(user_id) == "waiting_for_tz":
        text = update.message.text
        await update.message.reply_text("üîç –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ AI...")
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post("http://api:8000/ai/ask", json={"prompt": text})
                result = response.json().get("response", "‚ö†Ô∏è –û—à–∏–±–∫–∞ AI")
                await update.message.reply_text(result)
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI: {e}")
        user_states[user_id] = None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ai", ai_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_text))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫–∞–µ–º
if __name__ == "__main__":
    import asyncio
    import nest_asyncio
    nest_asyncio.apply()

    asyncio.get_event_loop().run_until_complete(main())


