import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart
from dotenv import load_dotenv
import httpx
from common.logger import get_logger

# –õ–æ–≥–≥–µ—Ä
logger = get_logger(__name__)
logger.info("üöÄ Telegram-–±–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç")

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

import socket

BOT_TOKEN = os.getenv("BOT_TOKEN")
ENVIRONMENT = os.getenv("ENVIRONMENT", "docker")

# –í—ã–±–æ—Ä API_URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
if ENVIRONMENT == "local":
    API_URL = "http://localhost:8000/ai/ask"
else:
    API_URL = "http://api:8000/ai/ask"

# –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
logger.info(f"üß† –û–∫—Ä—É–∂–µ–Ω–∏–µ: {ENVIRONMENT}")
logger.info(f"üåê API_URL: {API_URL}")
logger.info(f"üîê BOT_TOKEN –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {BOT_TOKEN[:10] if BOT_TOKEN else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
logger.info(f"üß¨ PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {os.getpid()}")
try:
    hostname = socket.gethostname()
    ip = socket.gethostbyname(hostname)
    logger.info(f"üñ•Ô∏è –•–æ—Å—Ç: {hostname} | IP: {ip}")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP: {e}")

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def handle_start(message: Message):
    logger.info(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å /start")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–µ–Ω–¥–µ—Ä–∞–º–∏. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")

# –õ—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message()
async def handle_any_message(message: Message):
    user_input = message.text
    logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {user_input}")
    await message.answer("üîé –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–Ω–¥–µ—Ä—ã...")

    try:
        async with httpx.AsyncClient() as client:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /search
            search_url = API_URL.replace("/ai/ask", "/search")
            search_resp = await client.post(search_url, json={"query": user_input})
            search_data = search_resp.json()
            result = search_data.get("result", "")

            if result:
                await message.answer(f"üì¶ –ù–∞–π–¥–µ–Ω–æ:\n{result}")
                return

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º AI
            await message.answer("ü§ñ –î—É–º–∞—é –∫–∞–∫ AI...")
            ai_resp = await client.post(API_URL, json={"question": user_input})
            ai_data = ai_resp.json()
            reply = ai_data.get("answer", "‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI")

    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ")
        reply = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}"

    await message.answer(reply)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
